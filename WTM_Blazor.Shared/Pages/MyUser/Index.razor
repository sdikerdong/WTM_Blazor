@page "/MyUser"
@using WTM_Blazor.ViewModel.MyUserVMs;
@inherits BasePage
@attribute [ActionDescription("myUser", "WTM_Blazor.Controllers,MyUser")]

<WTSearchPanel OnSearch="@DoSearch">
    <ValidateForm Model="@SearchModel">
        <Row ItemsPerRow="ItemsPerRow.Three" RowType="RowType.Inline">

            <Select @bind-Value="@SearchModel.HospitalId" Items="@AllHospitals" PlaceHolder="@WtmBlazor.Localizer["Sys.All"]"/>
            <BootstrapInput @bind-Value="@SearchModel.Email"  />
            <Select @bind-Value="@SearchModel.Gender"  PlaceHolder="@WtmBlazor.Localizer["Sys.All"]"/>
            <BootstrapInput @bind-Value="@SearchModel.ITCode"  />
        </Row>
    </ValidateForm>
</WTSearchPanel>



<Table @ref="dataTable" TItem="MyUser_View" OnQueryAsync="OnSearch" IsPagination="true" IsStriped="true" IsBordered="true" ShowRefresh="false"
       ShowToolbar="true" IsMultipleSelect="true" ShowExtendButtons="true" ShowDefaultButtons="false" style="margin-top:10px;">
    <TableColumns>

        <TableColumn @bind-Field="@context.Name_view"  />
        <TableColumn @bind-Field="@context.Name_view2"  />
        <TableColumn @bind-Field="@context.Email"  />
        <TableColumn @bind-Field="@context.Gender"  />
        <TableColumn @bind-Field="@context.CellPhone"  />
        <TableColumn @bind-Field="@context.HomePhone"  />
        <TableColumn @bind-Field="@context.Address"  />
        <TableColumn @bind-Field="@context.ZipCode"  />
        <TableColumn @bind-Field="@context.ITCode"  />
        <TableColumn @bind-Field="@context.Password"  />
        <TableColumn @bind-Field="@context.Name"  />
        <TableColumn @bind-Field="@context.IsValid" ComponentType="@typeof(Switch)" />
        <TableColumn @bind-Field="@context.PhotoId"  >

            <Template Context="data">
                <Avatar @key="data.Value" Size="Size.ExtraSmall" GetUrlAsync="()=>WtmBlazor.GetBase64Image(data.Value.ToString(),150,150)" />
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.TenantCode"  />
    </TableColumns>
    <TableToolbarTemplate>
        @if (IsAccessable("/api/MyUser/Add"))
        {
            <TableToolbarButton TItem="MyUser_View" Color="Color.Primary" Icon="fa fa-fw fa-plus" Text="@WtmBlazor.Localizer["Sys.Create"]" OnClickCallback="OnCreateClick" />
        }
        @if (IsAccessable("/api/MyUser/BatchDelete"))
        {
            <TableToolbarPopconfirmButton TItem="MyUser_View" Color="Color.Primary"
                                          Icon="fa fa-fw fa-trash-o" Text="@WtmBlazor.Localizer["Sys.BatchDelete"]"
                                          OnConfirm="@OnBatchDeleteClick" Content="@WtmBlazor.Localizer["Sys.BatchDeleteConfirm"]" CloseButtonText="@WtmBlazor.Localizer["Sys.Close"]"
                                          ConfirmButtonText="@WtmBlazor.Localizer["Sys.BatchDelete"]" ConfirmButtonColor="Color.Danger" />
        }
        
        @if (IsAccessable("/api/MyUser/Import"))
        {
            <TableToolbarButton TItem="MyUser_View" Color="Color.Primary" Icon="fa fa-fw fa-upload" Text="@WtmBlazor.Localizer["Sys.Import"]" OnClickCallback="@OnImportClick" />
        }
        @if (IsAccessable("/api/MyUser/ExportExcel"))
        {
            <TableToolbarButton TItem="MyUser_View" Color="Color.Primary" Icon="fa fa-fw fa-download" Text="@WtmBlazor.Localizer["Sys.Export"]" OnClickCallback="@OnExportClick" IsAsync="true" />
        }
    </TableToolbarTemplate>
    <RowButtonTemplate>
        <div style="padding-right:10px;">
            @if (IsAccessable("/api/MyUser/Edit"))
            {
                <TableCellButton Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-edit" Text="@WtmBlazor.Localizer["Sys.Edit"]" OnClick="() => OnEditClick(context)" />
            }
            @if (IsAccessable("/api/MyUser/{id}"))
            {
                <TableCellButton Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-info" Text="@WtmBlazor.Localizer["Sys.Details"]" OnClick="()=>OnDetailsClick(context)" />
            }
            @if (IsAccessable("/api/MyUser/BatchDelete"))
            {
                <PopConfirmButton Icon="fa fa-trash-o" Text="@WtmBlazor.Localizer["Sys.Delete"]" OnConfirm="() => OnDeleteClick(context)" Color="Color.Danger" Size="Size.ExtraSmall"
                                  Content="@WtmBlazor.Localizer["Sys.DeleteConfirm"]" CloseButtonText="@WtmBlazor.Localizer["Sys.Close"]" ConfirmButtonText="@WtmBlazor.Localizer["Sys.Delete"]" ConfirmButtonColor="Color.Danger" />
            }
        </div>
    </RowButtonTemplate>
</Table>

@code{

    private MyUserSearcher SearchModel = new MyUserSearcher();
    private Table<MyUser_View> dataTable;

    private List<SelectedItem> AllHospitals = new List<SelectedItem>();


    protected override async Task OnInitializedAsync()
    {

        AllHospitals = await WtmBlazor.Api.CallItemsApi("/api/MyUser/GetHospitals", placeholder: WtmBlazor.Localizer["Sys.All"]);

        await base.OnInitializedAsync();
    }

    private async Task<QueryData<MyUser_View>> OnSearch(QueryPageOptions opts)
    {
        return await StartSearch<MyUser_View>("/api/MyUser/Search", SearchModel, opts);
    }

    private void DoSearch()
    {
        dataTable.QueryAsync();
    }

    private async Task OnCreateClick(IEnumerable<MyUser_View> items)
    {
        if (await OpenDialog<Create>(WtmBlazor.Localizer["Sys.Create"]) == DialogResult.Yes)
        {
            await dataTable.QueryAsync();
        }
    }

    private async Task OnEditClick(MyUser_View item)
    {
        if (await OpenDialog<Edit>(WtmBlazor.Localizer["Sys.Edit"], x => x.id == item.ID.ToString()) == DialogResult.Yes)
        {
            await dataTable.QueryAsync();
        }
    }

    private async Task OnDetailsClick(MyUser_View item)
    {
        await OpenDialog<Details>(WtmBlazor.Localizer["Sys.Details"], x => x.id == item.ID.ToString());
    }

    private async Task OnBatchDeleteClick()
    {
        if (dataTable.SelectedRows?.Any() == true)
        {
            await PostsData(dataTable.SelectedRows.Select(x => x.ID).ToList(), $"/api/MyUser/batchdelete", (s) => WtmBlazor.Localizer["Sys.BatchDeleteSuccess", s]);
            await dataTable.QueryAsync();
        }
        else
        {
            await WtmBlazor.Toast.Information(WtmBlazor.Localizer["Sys.Info"], WtmBlazor.Localizer["Sys.SelectOneRowMin"]);
        }
    }

    private async Task OnDeleteClick(MyUser_View item)
    {
        await PostsData(new List<string> { item.ID.ToString() }, $"/api/MyUser/batchdelete", (s) => "Sys.OprationSuccess");
        await dataTable.QueryAsync();
    }


    private async Task OnExportClick(IEnumerable<MyUser_View> items)
    {
        if (dataTable.SelectedRows?.Any() == true)
        {
            await Download("/api/MyUser/ExportExcelByIds", dataTable.SelectedRows.Select(x => x.ID.ToString()).ToList());
        }
        else
        {
            await Download("/api/MyUser/ExportExcel", SearchModel);
        }
    }
    private async Task OnImportClick(IEnumerable<MyUser_View> items)
    {
        if (await OpenDialog<Import>(WtmBlazor.Localizer["Sys.Import"]) == DialogResult.Yes)
        {
            await dataTable.QueryAsync();
        }
    }

}
